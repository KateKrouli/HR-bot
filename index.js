import { Telegraf, Markup } from "telegraf";
import { google } from "googleapis";
import fs from "fs";
import path from "path";

const BOT_TOKEN = "7352494667:AAE4ozNZdOSg-gYTWKZjt-eREoKsk4UmYfg";
const SHEET_ID = "1p0oYa-bzPXpk-wEixBNnIIGzCKrzWAALhlhX_nzDyo4";
const CREDENTIALS_PATH = "./google-credentials.json"; // JSON-—Ñ–∞–π–ª –æ—Ç Google Cloud

const bot = new Telegraf(BOT_TOKEN);

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google
async function getVacancies() {
  const auth = new google.auth.GoogleAuth({
    keyFile: CREDENTIALS_PATH,
    scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
  });
  const sheets = google.sheets({ version: "v4", auth });
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: SHEET_ID,
    range: "A2:D", // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  });

  const rows = res.data.values || [];
  return rows.map(([id, title, city, description]) => ({
    id,
    title,
    city,
    description,
  }));
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) =>
  ctx.reply(
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏.\n–ù–∞–∂–º–∏ /jobs —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫."
  )
);

// –ö–æ–º–∞–Ω–¥–∞ /jobs
bot.command("jobs", async (ctx) => {
  const vacancies = await getVacancies();
  if (!vacancies.length) return ctx.reply("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π üôà");

  const buttons = vacancies.map((v) =>
    [Markup.button.callback(`${v.title} (${v.city})`, `job_${v.id}`)]
  );

  await ctx.reply("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", Markup.inlineKeyboard(buttons));
});

// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
bot.action(/job_(.+)/, async (ctx) => {
  const vid = ctx.match[1];
  const vacancies = await getVacancies();
  const v = vacancies.find((v) => v.id === vid);

  if (!v) return ctx.reply("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

  await ctx.reply(
    `üíº *${v.title}*\nüìç ${v.city}\n\n${v.description}\n\n–•–æ—á–µ—à—å –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è? –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π —Ñ–∞–π–ª-—Ä–µ–∑—é–º–µ.`,
    { parse_mode: "Markdown" }
  );

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  ctx.session = ctx.session || {};
  ctx.session.applyFor = v.id;
});

// –ü—Ä–∏—ë–º —Ñ–∞–π–ª–∞
bot.on("document", async (ctx) => {
  const fileId = ctx.message.document.file_id;
  const fileName = ctx.message.document.file_name;
  const user = ctx.from;

  const fileLink = await ctx.telegram.getFileLink(fileId);

  // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
  console.log("–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫:", {
    user: user.username || user.first_name,
    file: fileLink.href,
    vacancyId: ctx.session?.applyFor,
  });

  await ctx.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ—ë —Ä–µ–∑—é–º–µ.");
});

// –ó–∞–ø—É—Å–∫
bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
